# Step 1: import the necessary libraries
import pandas as pd     # Pandas is used for data handling and analytics
import random           # Random is used to generate fake but realistic data
import os               # OS needed for handling file paths and directories

# Step 2: ensure the 'data' folder exists
os.makedirs("data", exist_ok=True)

# Step 3: create fake customer data
customers = []
for i in range(1, 21):      # We will create 20 customers for now
    customer = {
        "CustomerID": i,
        "Name": f"Customer_{i}",
        "Age": random.randint(18,65),
        "Total_Spend": round(random.uniform(100, 2000), 2), 
        "Purchases": random.randint(1, 20)
    }
    customers.append(customer)

# Step 4: create a pandas dataframe from the list of dictionaries
df = pd.DataFrame(customers)

# Step 5: save the dataframe to a CSV file
csv_path = "data/customers.csv"
df.to_csv(csv_path, index=False)

print(f"Dataset saved to {csv_path}")

# Step 6: read the CSV file back into a Dataframe
data = pd.read_csv(csv_path)

# Step 7: inspect the dataset
print("\n--- DATA PREVIEW ---")
print(data.head())      # shows the first 5 rows

print("\n--- DATA INFO ---")
print(data.info())      # shows column names, data types, adn non-null counts

print("\n--- SUMMARY STATISTICS ---")
print(data.describe())  # gives mean, std, min, max etc.

# Step 8: calculate average spend per purchase
data["Avg_Spend_Per_Purchase"] = data["Total_Spend"] /data["Purchases"]

print("\n---AVERAGE SPEND PER PURCHASE (first 5 customers) ---")
print(data[["CustomerID", "Name", "Avg_Spend_Per_Purchase"]].head())

# Step 9: find the top 5 customers by total spend
top_customers = data.sort_values(by="Total_Spend", ascending=False).head(5)

print("\n--- TOP 5 CUSTOMERS BY TOTAL SPEND ---")
print(top_customers[["CustomerID", "Name", "Total_Spend"]])

# Step 10: group customers by age range
bins = [18, 25, 35, 50, 65]     # age ranges
labels = ["18-25", "26-35", "36-50", "51-65"]

data["Age_Group"] = pd.cut(data["Age"], bins=bins, labels=labels, right=True)

# average spend per age group
avg_spend_by_age = data.groupby("Age_Group")["Total_Spend"].mean().round(2)

print("\n--- AVERAGE TOTAL SPEND BY AGE GROUP ---")
print(avg_spend_by_age)

# Step 11: import the Matplotlib library
import matplotlib.pyplot as plt

# Step 12: plot total spend distribution
plt.figure(figsize=(8, 4))
plt.hist(data["Total_Spend"], bins=10, color='skyblue', edgecolor='black')
plt.title("Distribution of Total Spend")
plt.xlabel("Total Spend ($)")
plt.ylabel("Number of Customers")
plt.grid(True, linestyle="--", alpha=0.6)
plt.tight_layout()
plt.show

# Step 13: plot average spend by age group
plt.figure(figsize=(6, 4))
avg_spend_by_age.plot(kind="bar", color='lightgreen', edgecolor='black')
plt.title("Average Total Spend by Age Group")
plt.xlabel("Age Group")
plt.ylabel("Average Spend ($)")
plt.grid(True, linestyle="--", alpha=0.6)
plt.tight_layout()
plt.show()

# Step 14: create an 'outputs' folder if it doesn't exist
import os

output_dir = "outputs"
os.makedirs(output_dir, exist_ok=True)

# Step 15: save plots instead of only showing them
plt.figure(figsize=(8, 4))
plt.hist(data["Total_Spend"], bins=10, color='skyblue', edgecolor='black')
plt.title("Distribution of Total Spend")
plt.xlabel("Total Spend ($)")
plt.ylabel("Number of Customers")
plt.grid(True, linestyle="--", alpha=0.6)
plt.tight_layout()
plt.savefig(os.path.join(output_dir, "spend_distribution.png"))  # Save the figure
plt.close()

plt.figure(figsize=(6, 4))
avg_spend_by_age.plot(kind="bar", color='lightgreen', edgecolor='black')
plt.title("Average Total Spend by Age Group")
plt.xlabel("Age Group")
plt.ylabel("Average Spend ($)")
plt.grid(True, linestyle="--", alpha=0.6)
plt.tight_layout()
plt.savefig(os.path.join(output_dir, "avg_spend_by_age.png"))
plt.close()

# Step 16: export top 5 customers to CSV
top_customers.to_csv(os.path.join(output_dir, "top_customers.csv"), index=False)

print("\nâœ… All files exported successfully in the 'outputs' folder!")
